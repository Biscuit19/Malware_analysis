import math


# 指令熵
def instruction_entropy(ins_list, sliding_window):
	d = int(len(ins_list) / sliding_window)
	m = []
	for i in range(d):
		base = i * sliding_window
		window = ins_list[base:base + sliding_window]
		count = {}  # 空字典
		for j in window:
			j = j[:len(j) - 1]
			count[j] = count.get(j, 0) + (1 / len(window))
		entro = []
		for a in count.values():
			entro.append(a)
		result = 0
		for x in entro:
			result += (-x) * math.log(x, 2)
		m.append(result)
	return m


def slide_instruction_entropy(ins_list):

	ie = instruction_entropy(ins_list, 16)
	l = []
	for e in ie:
		l.extend([e]*32)

	rate = math.ceil(255 / math.log(16, 2))
	ie = [x * rate for x in l]
	return ie
