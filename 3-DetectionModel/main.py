import os

import torch
from torch import nn

import tool
from source import *
from Visualization import rgb_hil, ins_slide_entropy
from Model import final

# img_file_path = r"G:\malware-classification\benign\benign_img2\1a4889e7cab2ee8495c930fbeb2568d1ae40c069bd30eba058e2db09bda596c3.bytes.png"
output = ""
i = 0


class Classification(nn.Module):
    def __init__(self):
        super(Classification, self).__init__()
        self.tanh = nn.Tanh()
        self.hidden = nn.Linear(57, 8)
        self.first = nn.Linear(8, 4)
        self.output = nn.Linear(4, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.hidden(x.to(torch.float32))
        x = self.tanh(x)
        x = self.first(x)
        x = self.tanh(x)
        x = self.output(x)
        x = self.sigmoid(x)
        return x


# 检测exe
# def detect():
#
#
#     if s.text_exists:
#         #print(s.ins_entropy)
#     else:
#         #print(s.shell)
#     write_byte()
#     gen_rgb_hil()
#
#     tensor = final.getTensor(img_file_path)
#     res = final.two_classify(tensor)
#     if res:
#         #print('是病毒')
#     else:
#         #print('啥也不是')
#     #print('类型为: ', final.get_type(tensor))
def detect():
    global output
    output += "## I. Shelling & Confusion\n"
    get_ins_entropy()

    write_byte()
    output += "## II. Malware Detection\n"
    gen_rgb_hil()
    detect_img()


# .bytes
def write_byte():
    tool.write_file(bytes_file_path, s.raw_without_header.hex())


# 生成图
def gen_rgb_hil():
    global output
    rgb_hil.generate(s.raw_without_header, img_file_path)
    output += "![malwareImage](" + img_file_path + ")\n\n"


# 获取指令熵
def get_ins_entropy():
    global output
    if s.text_exists:
        ins_slide_entropy.gen_slide_ins_entropy_img(img_ins_entro_path, s.slide_ins_entropy)
        intro = s.ins_entropy[0]
        #print("No encryption shell detected,The instruction entropy of the PE file is ", intro)
        output += "**No encryption shell** detected! \n\n The instruction entropy of the PE file is: **" + str(
            intro) + "**\n\n"

        output += "![entropyImage](" + img_ins_entro_path + ")\n\n"

        if intro > 4:
            #print("According to the instruction entropy, this file may be confused")
            output += "According to the instruction entropy, this file **may be** confused\n\n"
        else:
            #print("According to the instruction entropy, this file may not be confused \n\n")
            output += "According to the instruction entropy, this file **may not be** confused. \n\n"
    else:
        #print("Encrypting shell is detected. Its type may be", s.shell)
        output += "Encrypting shell is detected! \n\n Its type might be **" + str(s.shell) + "** \n\n"


# 判断一张图片
def detect_img():
    global output
    tensor = final.getTensor(img_file_path)
    res = final.two_classify(tensor)
    if res:
        #print('This file **may be** malicious software')
        output += "This file **may be** malicious software! \n\n"
        #print('The type of this malicious virus may be: ', final.get_type(tensor))
        output += "The type of this malicious virus may be:  \n\n"
        types = final.get_type(tensor)
        output += "- most possibility: **"+types[0] +"**\n\n"
        output += "- Second possibility: **" + types[1] +"**\n\n"
        output += "- Third possibility: **" + types[2] +"**\n\n"
        # return [True, final.get_type(tensor)]
    else:
        #print('We don\'t think this file is malicious software')
        output += 'We don\'t think this file is malicious software. \n\n'
        # return [True, ""]


if __name__ == '__main__':
    path = r"C:\Users\86183\Desktop\RE_Workspace\b\00e732630fa8fac12df4ee802205a333.exe"
    raw = tool.read_file(path)
    s = Source(raw)
    md_file_path = path + ".md"
    bytes_file_path = path + '.bytes'
    img_file_path = path + '.png'
    img_ins_entro_path = path + '_ie.png'
    output += "# TEST REPORT OF " + path.split("\\")[-1] + "\n\n"

    detect()
    print(output)
    tool.write_md(md_file_path, output)
