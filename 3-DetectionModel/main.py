import torch
from torch import nn

import tool
from source import *
from Visualization import rgb_hil
from Model import final

path = r"C:\Users\17287\Desktop\IMG2_classifyed\IMG2_classifyed\train\autoit_969\3a0d74edd1053c9cf03e3c3aaf9372362202c792bedbeb37ef06602810105b29.png"
raw = tool.read_file(path)
s = Source(raw)
bytes_file_path = path + '.bytes'
img_file_path = path + '.png'


class Classification(nn.Module):
    def __init__(self):
        super(Classification, self).__init__()
        self.tanh = nn.Tanh()
        self.hidden = nn.Linear(57, 8)
        self.first = nn.Linear(8, 4)
        self.output = nn.Linear(4, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.hidden(x.to(torch.float32))
        x = self.tanh(x)
        x = self.first(x)
        x = self.tanh(x)
        x = self.output(x)
        x = self.sigmoid(x)
        return x


# 检测exe
# def detect():
#
#
#     if s.text_exists:
#         print(s.ins_entropy)
#     else:
#         print(s.shell)
#     write_byte()
#     gen_rgb_hil()
#
#     tensor = final.getTensor(img_file_path)
#     res = final.two_classify(tensor)
#     if res:
#         print('是病毒')
#     else:
#         print('啥也不是')
#     print('类型为: ', final.get_type(tensor))
def detect():
    get_ins_entropy()
    write_byte()
    gen_rgb_hil()
    detect_img()

# .bytes
def write_byte():
    tool.write_file(bytes_file_path, s.raw_without_header.hex())


# 生成图
def gen_rgb_hil():
    rgb_hil.generate(s.raw_without_header, img_file_path)


# 获取指令熵
def get_ins_entropy():
    if s.text_exists:
        intro = s.ins_entropy[0]
        print("No encryption shell detected,The instruction entropy of the PE file is",intro)
        if(intro > 4):
            print("According to the instruction entropy, this file may be confused")
        else:
            print("According to the instruction entropy, this file may not be confused")
    else:
        print("Encrypting shell is detected. Its type may be",s.shell)


# 判断一张图片
def detect_img():
    tensor = final.getTensor(img_file_path)
    res = final.two_classify(tensor)
    if res:
        print('This file may be malicious software')
        print('The type of this malicious virus may be: ', final.get_type(tensor))
        return [True, final.get_type(tensor)]
    else:
        print('We don\'t think this file is malicious software')
        return [True, ""]




if __name__ == '__main__':
    detect()
    # detect_img()
