import pefile
from capstone import *
from Process import transfer_asm, ins_entropy
from enum import Enum

'''
UPX0 共 1938次匹配 判断为upx
petite 共763次匹配 判断为petite
.MPRESS1 共370次匹配 判定为MPRESSEasy
aspack 共220次匹配 判定为aspack
AUTO 共94次匹配 疑似virtualbox
'''


class Shell(Enum):
	UPX = 0
	PEtite = 1
	MPRESSEasy = 2
	ASPack = 3
	VirtualBox = 4
	Unknown = 5

class Source:

	raw = b''
	raw_without_header = b''
	section_list = []

	text_exists = False
	text_section = None

	asm_mode = 0
	asm_code = []
	ins_entropy = []
	slide_ins_entropy = []

	shell = Shell.Unknown

	def __init__(self, raw):
		self.raw = raw

		# 提取代码段
		self.section_list = self.getSection()
		#print(self.section_list)
		for s in self.section_list:
			name: bytes = s.Name
			if name.find(b'.text') >= 0:
				self.text_exists = True
				self.text_section = s
			self.raw_without_header += s.get_data()

		if self.text_exists:
			# 反汇编
			self.asm_code = transfer_asm.exe2asm_code(self).split(' ')
			# 指令熵
			self.ins_entropy = ins_entropy.instruction_entropy(self.asm_code, len(self.asm_code))
			# 滑动窗口指令熵
			self.slide_ins_entropy = ins_entropy.slide_instruction_entropy(self.asm_code)
		else:
			self.shell_judge()

	# 获取程序段表
	def getSection(self):
		pe = pefile.PE(data=self.raw)
		#print(pe)
		# 运行平台
		if pe.FILE_HEADER.Machine == 0x014c:
			self.asm_mode = CS_MODE_32
		else:
			self.asm_mode = CS_MODE_64
		return pe.sections

	# 程序壳判断
	def shell_judge(self):
		s = str(self.section_list)
		if s.find('UPX0') >= 0:
			self.shell = Shell.UPX
		elif s.find('petite') >= 0:
			self.shell = Shell.PEtite
		elif s.find('.MPRESS1') >= 0:
			self.shell = Shell.MPRESSEasy
		elif s.find('aspack') >= 0:
			self.shell = Shell.ASPack
		elif s.find('AUTO') >= 0:
			self.shell = Shell.VirtualBox



